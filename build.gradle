buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            // Required for the curseforge task
            name = "gradle"
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.1.0"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7"
    }
}

repositories {
    maven {
        name 'progwml6'
        url "http://dvs1.progwml6.com/files/maven/"
    }
}

apply plugin: 'java'
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'com.matthewprenger.cursegradle'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven'
apply plugin: 'maven-publish'

ext.propFile = file "build.properties"

propFile.withReader {

    def prop = new Properties()
    prop.load(it)
    project.ext.props = new ConfigSlurper().parse prop
}

version = props.ac_version
group= "com.shinoow.abyssalcraft" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "AbyssalCraft"

sourceCompatibility = targetCompatibility = "1.8"
compileJava {
    sourceCompatibility = targetCompatibility = "1.8"
}

minecraft {
    version = "1.12.2-14.23.4.2747"
    runDir = "run"

    useDepAts = true

    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not allways work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = 'stable_39'
    makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    replaceIn "AbyssalCraft.java"
    replace "forgeversion", props.forge_version
    replace "ac_version", props.ac_version
    replace "cert_fingerprint", project.findProperty('signSHA1')
}

dependencies {

    deobfCompile "mezz.jei:jei_1.12.2:4.11.0.206"
}

version = "${props.mc_version}-${props.ac_version}"

processResources
        {
            // I really don't want that file to exist anywhere
            exclude '**/Thumbs.db'

            // this will ensure that this task is redone when the versions change.
            inputs.property "version", project.version
            inputs.property "mcversion", project.minecraft.version

            // replace stuff in mcmod.info, nothing else
            from(sourceSets.main.resources.srcDirs) {
                include 'mcmod.info'
                include 'version.properties'

                // replace version and mcversion
                expand ([
                        'version':project.version,
                        'acversion':project.props.ac_version,
                        'mcversion':project.props.mc_version,
                        'forgeversion':project.props.forge_version
                ])
            }

            // copy everything else, thats not the mcmod.info
            from(sourceSets.main.resources.srcDirs) {
                exclude 'mcmod.info'
                exclude 'version.properties'
            }
        }

task srcJar(type: Jar) {
    from sourceSets.main.allJava

    extension = 'jar'
    classifier = 'sources'
}

task apiJar(type: Jar, dependsOn: 'classes') {
    from sourceSets.main.allSource
    from sourceSets.main.output
    include 'com/shinoow/abyssalcraft/api/**'

    extension = 'jar'
    classifier = 'api'
}

artifacts {
    archives srcJar, apiJar
}

curseforge {
    apiKey = project.hasProperty('curseForgeApiKey') ? project.curseForgeApiKey : '' // gradle curse -Pcurseforge_key=your-api-key
    project{
        id = "53686" // http://minecraft.curseforge.com/mc-mods/"xxxxxx"-projectname
        releaseType = project.props.release_type //alpha beta release
        changelogType = 'html'
        changelog = new File('changelog.html') //must have at least an empty string
        addArtifact apiJar
        relations {
            optionalDependency 'jei'
        }
    }
}

publishing {
    publications {
        mavenStuff(MavenPublication) {
            from components.java
            artifact srcJar
            artifact apiJar
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
        }
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : ''
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : ''
    publications = ['mavenStuff']
    pkg {
        repo = 'maven'
        name = 'abyssalcraft'

        version {
            name = project.version
            released  = new Date()
            vcsTag = props.ac_version
        }
    }
}

task signJar(type: SignJar, dependsOn: reobfJar) {

    // Skips if the keyStore property is missing.
    onlyIf {
        project.hasProperty('keyStore')
    }

    // findProperty allows us to reference the property without it existing. 
    // Using project.propName would cause the script to fail validation if 
    // the property did not exist. 
    keyStore = project.findProperty('keyStore')
    alias = project.findProperty('keyStoreAlias')
    storePass = project.findProperty('keyStorePass')
    keyPass = project.findProperty('keyStoreKeyPass')
    inputFile = jar.archivePath
    outputFile = jar.archivePath
}

// Runs this task automatically when build is ran. 
build.dependsOn signJar

//copies the source files over to the folder from which they will be included in a RAR-file
task prepareFiles(type: Copy){
    from "$rootDir"
    include "build.gradle"
    include "build.properties"
    include "changelog.html"
    include "gradle.properties"
    include "src/main/**"
    into "$buildDir/rarTemp"

    String filePath = "${project.findProperty("sourceDirAC")}/AC source ${props.ac_version} (${props.mc_version}).rar"
    String filePath1 = "${buildDir}/rarTemp/*"

    new File(projectDir, "generateRAR.bat").text = project.findProperty("rarCommand")+' "'+filePath+'" "'+filePath1+'"';
}

//copies the API jar to the place where binaries are stored
task copyApiJar(type: Copy){
    from apiJar
    into "${project.findProperty("binariesDir")}/${archivesBaseName}/api"
}

//copies the src jar to the place where binaries are stored
task copySrcJar(type: Copy){
    from srcJar
    into "${project.findProperty("binariesDir")}/${archivesBaseName}/dev"
}

//copies the main jar to the place where binaries are stored
task copyJar(type: Copy){
    from jar
    into "${project.findProperty("binariesDir")}/${archivesBaseName}"
}

//generates a jar file with the source code and gradle files, then places it in a good place
task generateRar(type: Exec){

    commandLine 'cmd', "/c", "generateRAR.bat";
    ignoreExitValue = true
}

//runs all of the tasks for building and deploying
task buildAndDeploy(){
    dependsOn 'clean'
    dependsOn 'build'
    dependsOn 'curseforge'
    // dependsOn 'bintrayUpload'
    dependsOn 'copyApiJar'
    dependsOn 'copySrcJar'
    dependsOn 'copyJar'
    dependsOn 'prepareFiles'
    dependsOn 'generateRar'
    tasks.findByName('build').mustRunAfter 'clean'
    tasks.findByName('curseforge').mustRunAfter 'build'
    // tasks.findByName('bintrayUpload').mustRunAfter 'curseforge'
    tasks.findByName('prepareFiles').mustRunAfter 'build'
    tasks.findByName('generateRar').mustRunAfter 'prepareFiles'
    tasks.findByName('copyApiJar').mustRunAfter 'prepareFiles'
    tasks.findByName('copySrcJar').mustRunAfter 'prepareFiles'
    tasks.findByName('copyJar').mustRunAfter 'prepareFiles'
}

//final cleanup
buildAndDeploy.doLast {
    delete "${buildDir}/rarTemp/"
    delete "generateRAR.bat"
}